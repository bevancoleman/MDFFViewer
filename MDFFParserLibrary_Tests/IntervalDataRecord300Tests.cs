using MDFFParserLibrary.Line;
using MDFFParserLibrary.Models;

namespace MDFFParserLibrary_Tests;

[TestFixture]
public class IntervalDataRecord300Tests
{
    private IntervalDataRecord _parser;

    [SetUp]
    public void Setup()
    {
        _parser = new IntervalDataRecord();
    }

    [Test]
    public void IntervalDataRecord300_30MinIntervals_Length()
    {
        const string line =
            "300,20211003,0.00500000000000,0.00400000000000,0.00400000000000,0.00400000000000,0.00500000000000,0.00300000000000,0.00400000000000,0.00300000000000,0.00400000000000,0.00400000000000,0.00300000000000,0.00400000000000,0.00400000000000,0.02700000000000,0.04500000000000,0.08700000000000,0.35500000000000,0.02000000000000,0.14900000000000,0.51000000000000,0.05000000000000,0.01700000000000,0.00400000000000,0.01900000000000,0.00600000000000,0.00700000000000,0.00800000000000,0.00800000000000,0.01400000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00200000000000,0.00900000000000,0.00800000000000,0.00700000000000,0.00600000000000,0.00700000000000,0.01000000000000,0.00800000000000,0.00700000000000,0.00700000000000,0.00600000000000,0.00600000000000,0.00500000000000,A,,,20211004022028,";
        const int expectedIntervals = 60 * 24 / 30;
        const int expectedRecordIndicator = 300;

        var lineSplit = line.Split(",");
        var results = _parser.ParseLine(lineSplit);

        Assert.That(results, Is.Not.Null);
        Assert.That(results.RecordIndicator, Is.EqualTo(expectedRecordIndicator));

        var resultsCast = (IntervalDataRecord300)results;
        Assert.That(resultsCast.IntervalValue, Has.Length.EqualTo(expectedIntervals));
        Assert.That(resultsCast.IntervalValue[0], Is.EqualTo(0.005m));
        Assert.That(resultsCast.IntervalValue[expectedIntervals - 1], Is.EqualTo(0.005m));

        Assert.That(resultsCast.QualityMethod, Is.EqualTo("A"));
        Assert.That(resultsCast.UpdateDateTime, Is.EqualTo(new DateTime(2021, 10, 04, 2, 20, 28)));
    }

    [Test]
    public void IntervalDataRecord300_5MinIntervals_Length()
    {
        const string line =
            "300,20230430,0.00200000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00200000000000,0.00200000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00200000000000,0.00100000000000,0.00100000000000,0.00300000000000,0.00200000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00200000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00200000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00000000000000,0.00200000000000,0.00200000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00300000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00800000000000,0.00200000000000,0.00200000000000,0.00300000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00200000000000,0.00300000000000,0.00200000000000,0.00200000000000,0.00100000000000,0.00200000000000,0.00200000000000,0.00200000000000,0.00200000000000,0.00200000000000,0.00200000000000,0.00100000000000,0.00000000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00400000000000,0.00300000000000,0.00800000000000,0.00700000000000,0.01100000000000,0.00600000000000,0.00500000000000,0.00600000000000,0.00700000000000,0.00500000000000,0.00600000000000,0.00600000000000,0.00500000000000,0.00500000000000,0.00600000000000,0.00800000000000,0.00800000000000,0.00600000000000,0.01700000000000,0.01200000000000,0.00500000000000,0.00400000000000,0.00600000000000,0.00400000000000,0.00400000000000,0.00300000000000,0.00200000000000,0.00100000000000,0.00500000000000,0.00500000000000,0.00500000000000,0.00200000000000,0.00300000000000,0.00300000000000,0.00400000000000,0.00400000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00000000000000,0.00400000000000,0.00700000000000,0.00500000000000,0.00400000000000,0.00700000000000,0.00500000000000,0.00400000000000,0.00500000000000,0.00500000000000,0.00300000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00700000000000,0.00700000000000,0.00100000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.00000000000000,0.02100000000000,0.00300000000000,0.00300000000000,0.00600000000000,0.00500000000000,0.00700000000000,0.00500000000000,0.00400000000000,0.00600000000000,0.00700000000000,0.00800000000000,0.00300000000000,0.00500000000000,0.00700000000000,0.01700000000000,0.01900000000000,0.01700000000000,0.02000000000000,0.04600000000000,0.06800000000000,0.04000000000000,0.02100000000000,0.03200000000000,0.01000000000000,0.00600000000000,0.00100000000000,0.02600000000000,0.00300000000000,0.01700000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00200000000000,0.00100000000000,0.00000000000000,0.00200000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00100000000000,0.00000000000000,0.01400000000000,0.00400000000000,0.00200000000000,0.00300000000000,0.00200000000000,0.00200000000000,0.00300000000000,0.00200000000000,0.00300000000000,0.00300000000000,0.00200000000000,0.00500000000000,0.06400000000000,0.08200000000000,0.08100000000000,0.07800000000000,0.07700000000000,0.07600000000000,0.08100000000000,0.07800000000000,0.06600000000000,0.07200000000000,0.07800000000000,0.07700000000000,0.08000000000000,0.08700000000000,0.08600000000000,0.07700000000000,0.07400000000000,0.07300000000000,0.07300000000000,0.07500000000000,0.08400000000000,0.08300000000000,0.07300000000000,0.07400000000000,0.06300000000000,0.06300000000000,0.07100000000000,0.07500000000000,0.07200000000000,0.06300000000000,0.06100000000000,0.06300000000000,0.04900000000000,0.08100000000000,0.11000000000000,0.03300000000000,0.02600000000000,A,,,20230501010431,";
        const int expectedIntervals = 60 * 24 / 5;
        const int expectedRecordIndicator = 300;

        var lineSplit = line.Split(",");
        var results = _parser.ParseLine(lineSplit);

        Assert.That(results, Is.Not.Null);
        Assert.That(results.RecordIndicator, Is.EqualTo(expectedRecordIndicator));

        var resultsCast = (IntervalDataRecord300)results;
        Assert.That(resultsCast.IntervalValue, Has.Length.EqualTo(expectedIntervals));
        Assert.That(resultsCast.IntervalValue[0], Is.EqualTo(0.002m));
        Assert.That(resultsCast.IntervalValue[expectedIntervals - 1], Is.EqualTo(0.026m));

        Assert.That(resultsCast.QualityMethod, Is.EqualTo("A"));
        Assert.That(resultsCast.UpdateDateTime, Is.EqualTo(new DateTime(2023, 05, 01, 1, 4, 31)));
    }
}